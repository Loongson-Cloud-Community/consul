# Run all units tests, as well as some misc code checks and lints

name: go-tests

on:
  pull_request:
    branches-ignore:
      - stable-website
      - 'docs/**'
      - 'ui/**'
      - 'mktg-**' # Digital Team Terraform-generated branches' prefix
      - 'backport/docs/**'
      - 'backport/ui/**'
      - 'backport/mktg-**'
  push:
    branches:
      # Push events on the main branch
      - main
      - release/**

permissions:
  contents: read

env:
  GOPRIVATE: github.com/hashicorp # Required for enterprise deps

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      compute-small: ${{ steps.setup-outputs.outputs.compute-small }}
      compute-medium: ${{ steps.setup-outputs.outputs.compute-medium }}
      compute-large: ${{ steps.setup-outputs.outputs.compute-large }}
      compute-xl: ${{ steps.setup-outputs.outputs.compute-xl }}
      # TODO: these could be in a top-level env block, but env can't be
      # referenced in `with` args. They probably could be Actions Variables
      # https://github.com/hashicorp/consul/settings/variables/actions
      # but we don't appear to use those
      GOVERSION_LATEST: "${{ steps.GOVERSION.outputs.LATEST }}"
      # n-1 release
      # TODO: better name?
      GOVERSION_LATESTSUB1: "${{ steps.GOVERSION.outputs.LATESTSUB1 }}"
    steps:
    - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
    - id: setup-outputs
      name: Setup outputs
      run: ./.github/scripts/get_runner_classes.sh
    - id: GOVERSION
      run: |
        echo "LATEST=1.20.6" >> "$GITHUB_OUTPUT"
        # release before latest (TODO: better name?)
        echo "LATESTSUB1=1.19.11" >> "$GITHUB_OUTPUT"

  check-go-mod:
    needs:
    - setup
    uses: ./.github/workflows/reusable-check-go-mod.yml
    with:
      runs-on: ${{ needs.setup.outputs.compute-small }}
      repository-name: ${{ github.repository }}
    secrets:
      elevated-github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}

  check-generated-protobuf:
    needs:
    - setup
    runs-on: ${{ fromJSON(needs.setup.outputs.compute-medium) }}
    steps:
    - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
    # NOTE: This step is specifically needed for ENT. It allows us to access the required private HashiCorp repos.
    - name: Setup Git
      if: ${{ endsWith(github.repository, '-enterprise') }}
      run: git config --global url."https://${{ secrets.ELEVATED_GITHUB_TOKEN }}:@github.com".insteadOf "https://github.com"
    - uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
      with:
        go-version-file: 'go.mod'
    - run: make proto-tools
      name: Install protobuf
    - run: make proto-format
      name: "Protobuf Format"
    - run: make --always-make proto
    - run: |
            if ! git diff --exit-code; then
              echo "Generated code was not updated correctly"
              exit 1
            fi
    - run: make proto-lint
      name: "Protobuf Lint"
    - name: Notify Slack
      if: ${{ failure() }}
      run: .github/scripts/notify_slack.sh

  check-generated-deep-copy:
    needs:
    - setup
    runs-on: ${{ fromJSON(needs.setup.outputs.compute-large) }}
    steps:
    - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
    # NOTE: This step is specifically needed for ENT. It allows us to access the required private HashiCorp repos.
    - name: Setup Git
      if: ${{ endsWith(github.repository, '-enterprise') }}
      run: git config --global url."https://${{ secrets.ELEVATED_GITHUB_TOKEN }}:@github.com".insteadOf "https://github.com"
    - uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
      with:
        go-version-file: 'go.mod'
    - run: make --always-make deep-copy
    - run: |
        if ! git diff --exit-code; then
          echo "Generated code was not updated correctly"
          exit 1
        fi
    - name: Notify Slack
      if: ${{ failure() }}
      run: .github/scripts/notify_slack.sh

  lint-enums:
    needs:
    - setup
    runs-on: ${{ fromJSON(needs.setup.outputs.compute-large) }}
    steps:
    - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
    # NOTE: This step is specifically needed for ENT. It allows us to access the required private HashiCorp repos.
    - name: Setup Git
      if: ${{ endsWith(github.repository, '-enterprise') }}
      run: git config --global url."https://${{ secrets.ELEVATED_GITHUB_TOKEN }}:@github.com".insteadOf "https://github.com"
    - uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
      with:
        go-version-file: 'go.mod'
    - run: go install github.com/reillywatson/enumcover/cmd/enumcover@master && enumcover ./...
    - name: Notify Slack
      if: ${{ failure() }}
      run: .github/scripts/notify_slack.sh

  lint-container-test-deps:
    needs:
    - setup
    runs-on: ${{ fromJSON(needs.setup.outputs.compute-small) }}
    steps:
    - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
    # NOTE: This step is specifically needed for ENT. It allows us to access the required private HashiCorp repos.
    - name: Setup Git
      run: git config --global url."https://${{ secrets.ELEVATED_GITHUB_TOKEN }}:@github.com".insteadOf "https://github.com"
    - uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
      with:
        go-version-file: 'go.mod'
    - run: make lint-container-test-deps
    - name: Notify Slack
      if: ${{ failure() }}
      run: .github/scripts/notify_slack.sh

  lint-consul-retry:
    needs:
    - setup
    runs-on: ${{ fromJSON(needs.setup.outputs.compute-small) }}
    steps:
    - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
    # NOTE: This step is specifically needed for ENT. It allows us to access the required private HashiCorp repos.
    - name: Setup Git
      if: ${{ endsWith(github.repository, '-enterprise') }}
      run: git config --global url."https://${{ secrets.ELEVATED_GITHUB_TOKEN }}:@github.com".insteadOf "https://github.com"
    - uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
      with:
        go-version-file: 'go.mod'
    - run: go install github.com/hashicorp/lint-consul-retry@master && lint-consul-retry
    - name: Notify Slack
      if: ${{ failure() }}
      run: .github/scripts/notify_slack.sh

  lint:
    needs:
    - setup
    uses: ./.github/workflows/reusable-lint.yml
    with:
      runs-on: ${{ needs.setup.outputs.compute-xl }}
      repository-name: ${{ github.repository }}
    secrets:
      elevated-github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}

  lint-32bit:
    needs:
    - setup
    uses: ./.github/workflows/reusable-lint.yml
    with:
      go-arch: "386"
      runs-on: ${{ needs.setup.outputs.compute-xl }}
      repository-name: ${{ github.repository }}
    secrets:
      elevated-github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}

## Unit tests
#
# These tests all use `reusable-unit.yml` (TODO: we could just put them all in there and matrix them?).
# They follow the naming convention go-test[-race]_(oss|ent|any)_<module>_<arch>_<go-version>, where:
#   (oss|ent|any): OSS or Enterprise; or `any` for whatever the current repo is
#   <module>: Go module, generally the subdir
#   <arch>: GOARCH
#   <go-version>: one of needs.setup.outputs.GOVERSION_{LATEST,LATESTSUB1}
#
# 

  go-test_oss_root_amd64_latest:
    needs:
    - setup
    uses: ./.github/workflows/reusable-unit.yml
    with:
      directory: .
      go-version: "${{ needs.setup.outputs.GOVERSION_LATEST }}"
      artifact_namespace: "go-test_oss_root_amd64_latest"
      runs-on: ${{ needs.setup.outputs.compute-xl }}
      repository-name: ${{ github.repository }}
      go-tags: ""
    permissions:
      id-token: write # NOTE: this permission is explicitly required for Vault auth.
      contents: read
    secrets:
      elevated-github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      consul-license: ${{secrets.CONSUL_LICENSE}}
      datadog-api-key: "${{ !endsWith(github.repository, '-enterprise') && secrets.DATADOG_API_KEY || '' }}"

  go-test_ent_root_amd64_latest:
    # TOOD: does this actually run OSS tests as well? should we only run either oss or enterprise, but not both?
    # why can't we just do the usual pattern with go-tags and rely on that?
    if: ${{ endsWith(github.repository, '-enterprise') }}
    needs:
    - setup
    uses: ./.github/workflows/reusable-unit.yml
    with:
      directory: .
      go-version: "${{ needs.setup.outputs.GOVERSION_LATEST }}"
      artifact_namespace: "go-test_enterprise_root_amd64_latest"
      runs-on: ${{ needs.setup.outputs.compute-xl }}
      repository-name: ${{ github.repository }}
      go-tags: "${{ github.event.repository.name == 'consul-enterprise' && 'consulent consulprem consuldev' || '' }}"
    permissions:
      id-token: write # NOTE: this permission is explicitly required for Vault auth.
      contents: read
    secrets:
      elevated-github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      consul-license: ${{secrets.CONSUL_LICENSE}}
      datadog-api-key: "${{ !endsWith(github.repository, '-enterprise') && secrets.DATADOG_API_KEY || '' }}"

  go-test-race_any_root_amd64_latest:
    needs:
    - setup
    uses: ./.github/workflows/reusable-unit.yml
    with:
      directory: .
      go-version: "${{ needs.setup.outputs.GOVERSION_LATEST }}"
      artifact_namespace: "go-test-race_any_root_amd64_latest"
      go-test-flags: '-race -gcflags=all=-d=checkptr=0'
      package-names-command: "go list ./... | grep -E -v '^github.com/hashicorp/consul/agent(/consul|/local|/routine-leak-checker)?$' | grep -E -v '^github.com/hashicorp/consul(/command|/connect|/snapshot)'"
      runs-on: ${{ needs.setup.outputs.compute-xl }}
      repository-name: ${{ github.repository }}
      # TODO: this is the case 90% of the time; we should make it the default, or, we
      # should change the abstraction to be an OSS/ENT bool
      go-tags: "${{ github.event.repository.name == 'consul-enterprise' && 'consulent consulprem consuldev' || '' }}"
    permissions:
      id-token: write # NOTE: this permission is explicitly required for Vault auth.
      contents: read
    secrets:
      elevated-github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      consul-license: ${{secrets.CONSUL_LICENSE}}
      datadog-api-key: "${{ !endsWith(github.repository, '-enterprise') && secrets.DATADOG_API_KEY || '' }}"

  go-test_any_root_386_latest:
    needs:
    - setup
    uses: ./.github/workflows/reusable-unit.yml
    with:
      directory: .
      artifact_namespace: "go-test_any_root_386_latest"
      go-version: "${{ needs.setup.outputs.GOVERSION_LATEST }}"
      go-arch: "386"
      go-test-flags: '-short'
      runs-on: ${{ needs.setup.outputs.compute-xl }}
      repository-name: ${{ github.repository }}
      go-tags: "${{ github.event.repository.name == 'consul-enterprise' && 'consulent consulprem consuldev' || '' }}"
    permissions:
      id-token: write # NOTE: this permission is explicitly required for Vault auth.
      contents: read
    secrets:
      elevated-github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      consul-license: ${{secrets.CONSUL_LICENSE}}
      datadog-api-key: "${{ !endsWith(github.repository, '-enterprise') && secrets.DATADOG_API_KEY || '' }}"

  go-test_any_envoyextensions_amd64_latest:
    needs:
    - setup
    uses: ./.github/workflows/reusable-unit.yml
    with:
      directory: envoyextensions
      go-version: "${{ needs.setup.outputs.GOVERSION_LATEST }}"
      artifact_namespace: "go-test_any_envoyextensions_amd64_latest"
      runs-on: ${{ needs.setup.outputs.compute-xl }}
      repository-name: ${{ github.repository }}
      go-tags: "${{ github.event.repository.name == 'consul-enterprise' && 'consulent consulprem consuldev' || '' }}"
    permissions:
      id-token: write # NOTE: this permission is explicitly required for Vault auth.
      contents: read
    secrets:
      elevated-github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      consul-license: ${{secrets.CONSUL_LICENSE}}
      datadog-api-key: "${{ !endsWith(github.repository, '-enterprise') && secrets.DATADOG_API_KEY || '' }}"

  go-test_any_troubleshoot_amd64_latest:
    needs:
    - setup
    uses: ./.github/workflows/reusable-unit.yml
    with:
      directory: troubleshoot
      go-version: "${{ needs.setup.outputs.GOVERSION_LATEST }}"
      artifact_namespace: "go-test_any_troubleshoot_amd64_latest"
      runs-on: ${{ needs.setup.outputs.compute-xl }}
      repository-name: ${{ github.repository }}
      go-tags: "${{ github.event.repository.name == 'consul-enterprise' && 'consulent consulprem consuldev' || '' }}"
    permissions:
      id-token: write # NOTE: this permission is explicitly required for Vault auth.
      contents: read
    secrets:
      elevated-github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      consul-license: ${{secrets.CONSUL_LICENSE}}
      datadog-api-key: "${{ !endsWith(github.repository, '-enterprise') && secrets.DATADOG_API_KEY || '' }}"

  go-test_any_api_amd64_latestsub1:
    needs:
    - setup
    uses: ./.github/workflows/reusable-unit.yml
    with:
      directory: api
      runs-on: ${{ needs.setup.outputs.compute-xl }}
      artifact_namespace: go-test_any_api_amd64_latestsub1
      repository-name: ${{ github.repository }}
      go-tags: "${{ github.event.repository.name == 'consul-enterprise' && 'consulent consulprem consuldev' || '' }}"
      go-version: "${{ needs.setup.outputs.GOVERSION_LATESTSUB1 }}"
    permissions:
      id-token: write # NOTE: this permission is explicitly required for Vault auth.
      contents: read
    secrets:
      elevated-github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      consul-license: ${{secrets.CONSUL_LICENSE}}
      datadog-api-key: "${{ !endsWith(github.repository, '-enterprise') && secrets.DATADOG_API_KEY || '' }}"

  go-test_any_api_amd64_latest:
    needs:
    - setup
    uses: ./.github/workflows/reusable-unit.yml
    with:
      directory: api
      runs-on: ${{ needs.setup.outputs.compute-xl }}
      repository-name: ${{ github.repository }}
      artifact_namespace: go-test_any_api_amd64_latest
      go-tags: "${{ github.event.repository.name == 'consul-enterprise' && 'consulent consulprem consuldev' || '' }}"
      go-version: "${{ needs.setup.outputs.GOVERSION_LATEST }}"
    permissions:
      id-token: write # NOTE: this permission is explicitly required for Vault auth.
      contents: read
    secrets:
      elevated-github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      consul-license: ${{secrets.CONSUL_LICENSE}}
      datadog-api-key: "${{ !endsWith(github.repository, '-enterprise') && secrets.DATADOG_API_KEY || '' }}"

  go-test_any_sdk_amd64_latestsub1:
    needs:
    - setup
    uses: ./.github/workflows/reusable-unit.yml
    with:
      directory: sdk
      runs-on: ${{ needs.setup.outputs.compute-xl }}
      repository-name: ${{ github.repository }}
      artifact_namespace: "go-test_any_sdk_amd64_latestsub1"
      go-tags: "${{ github.event.repository.name == 'consul-enterprise' && 'consulent consulprem consuldev' || '' }}"
      go-version: "${{ needs.setup.outputs.GOVERSION_LATESTSUB1 }}"
    permissions:
      id-token: write # NOTE: this permission is explicitly required for Vault auth.
      contents: read
    secrets:
      elevated-github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      consul-license: ${{secrets.CONSUL_LICENSE}}
      datadog-api-key: "${{ !endsWith(github.repository, '-enterprise') && secrets.DATADOG_API_KEY || '' }}"

  go-test_any_sdk_amd64_latest:
    needs:
    - setup
    uses: ./.github/workflows/reusable-unit.yml
    with:
      directory: sdk
      runs-on: ${{ needs.setup.outputs.compute-xl }}
      repository-name: ${{ github.repository }}
      artifact_namespace: "go-test_any_sdk_amd64_latest"
      go-tags: "${{ github.event.repository.name == 'consul-enterprise' && 'consulent consulprem consuldev' || '' }}"
      go-version: "${{ needs.setup.outputs.GOVERSION_LATEST }}"
    permissions:
      id-token: write # NOTE: this permission is explicitly required for Vault auth.
      contents: read
    secrets:
      elevated-github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      consul-license: ${{secrets.CONSUL_LICENSE}}
      datadog-api-key: "${{ !endsWith(github.repository, '-enterprise') && secrets.DATADOG_API_KEY || '' }}"

  noop:
    # TODO: not sure why this job exists
    runs-on: ubuntu-latest
    steps:
      - run: "echo ok"

  go-tests-success:
    # This is job is required for branch protection as a required gihub check
    # because GitHub actions show up as checks at the job level and not the
    # workflow level.  This is currently a feature request:
    # https://github.com/orgs/community/discussions/12395
    #
    # This job must:
    # - be placed after the fanout of a workflow so that everything fans back in
    #   to this job.
    # - "need" any job that is part of the fan out / fan in
    # - implement the if logic because we have conditional jobs
    #   (go-test-enteprise) that this job needs and this would potentially get
    #   skipped if a previous job got skipped.  So we use the if clause to make
    # sure it does not get skipped.
    needs:
    - setup
    - check-generated-deep-copy
    - check-generated-protobuf
    - check-go-mod
    - lint-consul-retry
    - lint-container-test-deps
    - lint-enums
    - lint
    - lint-32bit
    # - go-test-arm64
    - go-test_ent_root_amd64_latest
    - go-test_oss_root_amd64_latest
    - go-test-race_any_root_amd64_latest
    - go-test_any_envoyextensions_amd64_latest
    - go-test_any_troubleshoot_amd64_latest
    - go-test_any_api_amd64_latestsub1
    - go-test_any_api_amd64_latest
    - go-test_any_sdk_amd64_latestsub1
    - go-test_any_sdk_amd64_latest
    - go-test_any_root_386_latest
    # - go-test-s390x
    runs-on: ${{ fromJSON(needs.setup.outputs.compute-small) }}
    if: ${{ always() }}
    steps:
      - name: evaluate upstream job results
        run: |
          # exit 1 if failure or cancelled result for any upstream job
          if printf '${{ toJSON(needs) }}' | grep -E -i '\"result\": \"(failure|cancelled)\"'; then
            printf "Tests failed or workflow cancelled:\n\n${{ toJSON(needs) }}"
            exit 1
          fi
